// @see https://dev.to/oyemade/improve-performance-in-an-angular-app-using-brotli-and-gzip-text-compression-2p1e
import CompressionPlugin from 'compression-webpack-plugin';
// @see https://stackoverflow.com/a/75413982/16711967
import MonacoWebpackPlugin from 'monaco-editor-webpack-plugin';
import * as webpack from 'webpack';

export default (config: webpack.Configuration) => {
  config?.plugins?.push(new CompressionPlugin({ algorithm: 'gzip' }));
  config?.plugins?.push(
    new MonacoWebpackPlugin({
      // a ton of languages that are lazily loaded by default
      languages: [
        'abap',
        'apex',
        'azcli',
        'bat',
        'bicep',
        'cameligo',
        'clojure',
        'coffee',
        'cpp',
        'csharp',
        'csp',
        'css',
        'cypher',
        'dart',
        'dockerfile',
        'ecl',
        'elixir',
        'flow9',
        'freemarker2',
        'fsharp',
        'go',
        'graphql',
        'handlebars',
        'hcl',
        'html',
        'ini',
        'java',
        'javascript',
        'json',
        'julia',
        'kotlin',
        'less',
        'lexon',
        'liquid',
        'lua',
        'm3',
        'markdown',
        'mdx',
        'mips',
        'msdax',
        'mysql',
        'objective-c',
        'pascal',
        'pascaligo',
        'perl',
        'pgsql',
        'php',
        'pla',
        'postiats',
        'powerquery',
        'powershell',
        'protobuf',
        'pug',
        'python',
        'qsharp',
        'r',
        'razor',
        'redis',
        'redshift',
        'restructuredtext',
        'ruby',
        'rust',
        'sb',
        'scala',
        'scheme',
        'scss',
        'shell',
        'solidity',
        'sophia',
        'sparql',
        'sql',
        'st',
        'swift',
        'systemverilog',
        'tcl',
        'twig',
        'typescript',
        'vb',
        'wgsl',
        'xml',
        'yaml',
      ],
      // we can disable features that we end up not needing/using
      features: [
        'anchorSelect',
        'bracketMatching',
        'browser',
        'caretOperations',
        'clipboard',
        'codeAction',
        'codelens',
        'colorPicker',
        'comment',
        'contextmenu',
        'cursorUndo',
        'diffEditor',
        'dnd',
        'documentSymbols',
        'dropOrPasteInto',
        'find',
        'folding',
        'fontZoom',
        'format',
        'gotoError',
        'gotoLine',
        'gotoSymbol',
        'hover',
        'iPadShowKeyboard',
        'inPlaceReplace',
        'indentation',
        'inlayHints',
        'inlineCompletions',
        'inlineProgress',
        'inspectTokens',
        'lineSelection',
        'linesOperations',
        'linkedEditing',
        'links',
        'longLinesHelper',
        'multicursor',
        'parameterHints',
        'quickCommand',
        'quickHelp',
        'quickOutline',
        'readOnlyMessage',
        'referenceSearch',
        'rename',
        'semanticTokens',
        'smartSelect',
        'snippet',
        'stickyScroll',
        'suggest',
        'toggleHighContrast',
        'toggleTabFocusMode',
        'tokenization',
        'unicodeHighlighter',
        'unusualLineTerminators',
        'wordHighlighter',
        'wordOperations',
        'wordPartOperations',
      ],
    }),
  );
  // Remove the existing css loader rule
  const cssRuleIdx: number = config?.module?.rules?.findIndex((rule: any) => rule.test?.toString().includes(':css'));
  if (cssRuleIdx !== -1) {
    config?.module?.rules?.splice(cssRuleIdx!, 1);
  }
  config?.module?.rules?.push(
    {
      test: /\.css$/,
      use: ['style-loader', 'css-loader'],
    },
    {
      test: /\.ttf$/,
      type: 'asset/resource',
    },
  );
  return config;
};
